NAME
    Test::JSON::Type - Test JSON data with types.

SYNOPSIS
     use Test::JSON::Type;

     is_json_type($json, $json_expected, $test_name);

SUBROUTINES
  "is_json_type"
     is_json_type($json, $json_expected, $test_name);

    TODO

ERRORS
     is_json_type():
             JSON string isn't valid.
                     Error: %s
             JSON string to compare is required.
             Expected JSON string isn't valid.
                     Error: %s
             Expected JSON string to compare is required.

EXAMPLE1
     use strict;
     use warnings;

     use Test::JSON::Type;
     use Test::More 'tests' => 2;

     my $json_blank1 = '{}';
     my $json_blank2 = '{}';
     is_json_type($json_blank1, $json_blank2, 'Blank JSON strings.');

     my $json_struct1 = <<'END';
     {
       "bool": true,
       "float": 0.23,
       "int": 1,
       "null": null,
       "string": "bar"
     }
     END
     my $json_struct2 = <<'END';
     {
       "bool": false,
       "float": 1.23,
       "int": 2,
       "null": null,
       "string": "foo"
     }
     END
     is_json_type($json_struct1, $json_struct2, 'Structured JSON strings.');

     # Output:
     # 1..2
     # ok 1 - Blank JSON strings.
     # ok 2 - Structured JSON strings.

EXAMPLE2
     use strict;
     use warnings;

     use Test::JSON::Type;
     use Test::More 'tests' => 1;

     my $json_struct_err1 = <<'END';
     {
       "int": 1,
       "string": "1"
     }
     END
     my $json_struct_err2 = <<'END';
     {
       "int": 1,
       "string": 1
     }
     END
     is_json_type($json_struct_err1, $json_struct_err2, 'Structured JSON strings with error.');

     # Output:
     # TODO

EXAMPLE3
     use strict;
     use warnings;

     use Test::JSON::Type;
     use Test::More 'tests' => 1;

     my $json_struct_err1 = <<'END';
     {
       "int": 1,
       "array": ["1", 1]
     }
     END
     my $json_struct_err2 = <<'END';
     {
       "int": 1,
       "array": 1
     }
     END
     is_json_type($json_struct_err1, $json_struct_err2, 'Structured JSON strings with error.');

     # Output:
     # TODO

DEPENDENCIES
    Cpanel::JSON::XS, Cpanel::JSON::XS::Type, Error::Pure, Readonly,
    Test::Builder::Module, Test::Differences.

SEE ALSO
    Test::JSON
        Test JSON data

    Test::JSON::More
        JSON Test Utility

REPOSITORY
    <https://github.com/michal-josef-spacek/Test-JSON-Type>

AUTHOR
    Michal Josef Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    © Michal Josef Špaček 2021

    BSD 2-Clause License

VERSION
    0.01

